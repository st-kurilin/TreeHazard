package ua.kharkov.kture.ot.view.swing.additional.optimization;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.labels.StandardXYItemLabelGenerator;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.ui.RectangleEdge;
import org.jfree.ui.VerticalAlignment;

import sun.awt.VerticalBagLayout;
import ua.kharkov.kture.ot.common.math.Optimizer;
import ua.kharkov.kture.ot.model.Component;
import ua.kharkov.kture.ot.shared.OptimizationCriteria;
import ua.kharkov.kture.ot.shared.VariantVO;
import ua.kharkov.kture.ot.view.declaration.viewers.Window;
import ua.kharkov.kture.ot.view.swing.additional.AbstractAdditionalWindow;

import com.google.inject.Inject;

/**
 * @author alexander.korotkikh
 */
public class OptimizationWindow extends AbstractAdditionalWindow {

    private JComboBox criteriaSelection = new JComboBox(OptimizationCriteria.values());
    private JCheckBox ignoreWorstCheck = new JCheckBox("Ignore worst");
    private JButton optimizeButton = new JButton("Optimize");
    private JTable resultTable = new JTable();
    private ChartPanel chartPanel = null;
    private JPanel chartPanelWrapper = new JPanel();

    private ua.kharkov.kture.ot.view.declaration.viewers.Window.ApplicationPresenter presenter;

    @Override
    protected void go() {
        this.setTitle("Optimization");
        this.setLayout(new VerticalBagLayout());
        this.setResizable(false);

        chartPanelWrapper.setSize(new Dimension((int)this.getSize().getWidth(), 500));
        this.getContentPane().add(chartPanelWrapper);

        JPanel selectionPanel = new JPanel();
        selectionPanel.add(criteriaSelection);
        selectionPanel.add(ignoreWorstCheck);
        selectionPanel.add(optimizeButton);
        this.getContentPane().add(selectionPanel);

        resultTable.setModel(getNewTableModel());
        resultTable.setEnabled(false);

        JPanel resultPanel = new JPanel(new BorderLayout());
        resultPanel.add(resultTable.getTableHeader(), BorderLayout.PAGE_START);
        resultPanel.add(resultTable);
        this.getContentPane().add(resultPanel);

        optimizeButton.addActionListener(new OptimizeButtonActionListener());

        Map<Double, Double> b = new HashMap<Double, Double>();
    	for(Double i = 0. ; i < 15. ; i ++){
    		b.put(i, i);
    	}

    	showChart(b, 5.0, "XXXXX", "YYYYY");

        this.pack();
    }

    @Inject
    public void setPresenter(Window.ApplicationPresenter presenter) {
        this.presenter = presenter;
    }

    private class OptimizeButtonActionListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            DefaultTableModel tableModel = getNewTableModel();
            Map<Component, Collection<Optimizer.Item<VariantVO, Comparable>>> optimalVariants = presenter.optimizeByCriteria((OptimizationCriteria) criteriaSelection.getSelectedItem(), ignoreWorstCheck.isSelected());
            for (Map.Entry<Component, Collection<Optimizer.Item<VariantVO, Comparable>>> component : optimalVariants.entrySet()) {
                for (Optimizer.Item<VariantVO, Comparable> item : component.getValue()) {
                    tableModel.addRow(new Object[]{
                            component.getKey().getTitle(),
                            item.getProposition().getName(),
                            item.getProposition().getCrashProbability(),
                            item.getProposition().getCost()
                    });
                }
            }
            resultTable.setModel(tableModel);
            pack();
        }
    }

    private static DefaultTableModel getNewTableModel() {
        return new DefaultTableModel(new String[]{"Component", "Variant", "Probability", "Cost"}, 1);
    }

    public void showChart(Map<Double, Double> map, Double base, String xName, String yName){
//        setVisible(false);
        JFreeChart chart = createChart(createDataset(map, base), xName, yName);
        if(chartPanel == null){
            chartPanel = new ChartPanel(chart);
            chartPanel.setMouseZoomable(false);
            chartPanel.setPreferredSize(new Dimension(500, 200));
            chartPanel.setMaximumSize(new Dimension(500, 200));
            chartPanelWrapper.add(chartPanel);
        } else {
        	chartPanel.setChart(chart);
        }
        // С размерами 450*450
//        chartPanel.setPreferredSize(new Dimension(450, 450));
        // И ползунками если необходимо
//        JScrollPane sp = new JScrollPane(chartPanel);
////        sp.setPreferredSize(new Dimension(500, 500));
//        sp.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
//        add(sp);
//        setVisible(true);

    }

    private static TableXYDataset createDataset(Map<Double, Double> map, Double base) {

    	DefaultTableXYDataset dataset = new DefaultTableXYDataset();
         XYSeries s1 = new XYSeries("Базовый", true, false);
         XYSeries s2 = new XYSeries("Альтернативные", true, false);
         for(Map.Entry<Double, Double> m : map.entrySet()){
        	 (m.getKey().equals(base) ? s1 : s2).add(m.getKey(), m.getValue(), true);
         }

         dataset.addSeries(s1);
         dataset.addSeries(s2);

         dataset.setAutoWidth(true);

         return dataset;

    }

    private static JFreeChart createChart(TableXYDataset dataset, String xName, String yName) {

        // OX - ось абсцисс
        // задаем название оси
    	NumberAxis domainAxis = new NumberAxis();
        // Показываем стрелочку вправо
        domainAxis.setPositiveArrowVisible(true);
        //        // Задаем отступ от графика
//        domainAxis.setUpperMargin(0.2);


//        // OY - ось ординат
//        // Задаём название оси
        NumberAxis rangeAxis = new NumberAxis(yName);
//        // Задаём величину деления
//        rangeAxis.setStandardTickUnits(NumberAxis.createStandardTickUnits());
//        rangeAxis.setTickUnit(new NumberTickUnit(200));
//        // Показываем стрелочку вверх
//        rangeAxis.setPositiveArrowVisible(true);




        // Render
        // Создаем стопковый (не знаю как лучше перевести) график
        // 0.02 - расстояние между столбиками
        StackedXYBarRenderer renderer = new StackedXYBarRenderer(0.02);
//        // без рамки
//        renderer.setDrawBarOutline(false);
//        // цвета для каждого элемента стопки
        renderer.setSeriesPaint(0, Color.blue);
        renderer.setSeriesPaint(1, Color.red);
//        // Задаём формат и текст подсказки
//        renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator("{0} : {1} = {2} tonnes", new SimpleDateFormat("yyyy"), new DecimalFormat("#,##0")));
        renderer.setSeriesItemLabelGenerator(0, new StandardXYItemLabelGenerator());
        renderer.setSeriesItemLabelGenerator(1, new StandardXYItemLabelGenerator());
//        // Делаем её видимой
        renderer.setSeriesItemLabelsVisible(0, true);
        renderer.setSeriesItemLabelsVisible(1, true);
//        // И описываем её шрифт
        renderer.setSeriesItemLabelFont(0, new Font("Serif", Font.BOLD, 10));
        renderer.setSeriesItemLabelFont(1, new Font("Serif", Font.BOLD, 10));


        // Plot
        // Создаем область рисования
        XYPlot plot = new XYPlot(dataset, domainAxis, rangeAxis, renderer);
//        // Закрашиваем
//        plot.setBackgroundPaint(Color.white);
//        // Закрашиваем сетку
//        plot.setDomainGridlinePaint(Color.white);
//        plot.setRangeGridlinePaint(Color.white);
//        // Отступ от осей
//        plot.setAxisOffset(new RectangleInsets(0D, 0D, 10D, 10D));
//        plot.setOutlinePaint(null);


        // Chart
        // Создаем новый график
        JFreeChart chart = new JFreeChart(plot);
        // Закрашиваем
        chart.setBackgroundPaint(Color.white);
        // Перемещаем легенду в верхний правый угол
        chart.getLegend().setPosition(RectangleEdge.RIGHT);
        chart.getLegend().setVerticalAlignment(VerticalAlignment.TOP);


        return chart;
    }
}
